
let no_flake8_maps=1

let &viminfofile = expand('~/.local/share/nvim/shada/main.shada')

call plug#begin('~/.local/share/nvim/plugged')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFind' }
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'altercation/vim-colors-solarized'
Plug 'pboettch/vim-cmake-syntax'
Plug 'terryma/vim-multiple-cursors'
"Plug 'rhysd/vim-clang-format'
Plug 'scrooloose/nerdcommenter'
Plug 'troydm/easybuffer.vim'
Plug 'majutsushi/tagbar'
"Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py --clang-completer --rust-completer --go-completer' }
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'hrsh7th/nvim-compe'
Plug 'simrat39/rust-tools.nvim'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

"Plug 'nvim-lua/completion-nvim'
Plug 'chrisbra/Colorizer'
Plug 'vim-syntastic/syntastic'
Plug 'nvie/vim-flake8'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/RltvNmbr.vim'
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
"Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }

" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'freitass/todo.txt-vim'
Plug 'aserebryakov/vim-todo-lists'

call plug#end()

nnoremap XX :qa!<CR>

let mapleader = ","
let maplocalleader = ","

let g:syntastic_python_checkers=['flake8']
let g:syntastic_cpp_checkers=['gcc']
let g:pep8_map=''
let g:PyFlakeCheckers='pep8,mccabe,pyflakes'
let g:PyFlakeDefaultComplexity=7
nnoremap <F7> :SyntasticCheck<CR>
let g:ctrlp_custom_ignore='_out\|\.vscode\|\.git'
let g:ctrlp_root_markers = ['.treetop']
let g:ctrlp_working_path_mode='r'
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_autoclose_preview_window_after_completion=1
"let g:ycm_autoclose_preview_window_after_insertion=1
""let g:ycm_clangd_args=['--cuda-gpu-arch=sm_70', '--cuda-path=/home/nikkon/p4/sw/dev/gpu_drv/chips_a/apps/dcgm/nvvs/cuda']
"let g:ycm_language_server=
"            \ [
"            \   {
"            \       'name': 'rust',
"            \       'cmdline': ['rust-analyzer'],
"            \       'filetypes': ['rust'],
"            \       'project_root_files': ['Cargo.toml']
"            \   }
"            \ ]
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
set background=dark
let g:gruvbox_contrast_light="hard"
let g:gruvbox_italic=0
let g:gruvbox_invert_signs=0
let g:gruvbox_improved_strings=0
let g:gruvbox_improved_warnings=1
let g:gruvbox_undercurl=1
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_termcolors=256
let g:gruvbox_italicize_comments=0
let g:clang_format_path="/usr/bin/clang-format"
silent! colorscheme gruvbox
"set termguicolors
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1
nmap <Tab> :NERDTreeFind<CR>
" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L
set guioptions-=T
nmap <leader>be :EasyBufferToggle<cr>
nmap <leader>t :TagbarToggle<CR>
set clipboard+=unnamedplus "Enable copy/paste direcly to windows clipboard
set clipboard+=unnamed "Enable copy/paste direcly to windows clipboard
set enc=utf-8
"set lines=40
"set columns=200
filetype plugin indent on
syntax on
set fileformats=unix
set scrolloff=0
set switchbuf=useopen
inoremap jk <Esc>
set autoread
set backspace=indent,eol,start
set binary
set cinoptions=:0,l1,g0,(0,W1s,m1
set completeopt=menuone,preview
set hidden
set history=1000
set incsearch
set laststatus=2
set listchars=tab:>-,trail:@
set list
set lazyredraw
set modelines=0
set noeol
set nu
set numberwidth=5
set ruler
set showcmd
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set formatoptions=qrn1
set ignorecase
set smartcase
set showmatch
set gdefault
set hlsearch
"set ttymouse=xterm2
set mouse=a
set nowrap
set sidescroll=3
set sidescrolloff=10
nnoremap * *<S-n>
"nnoremap * *<C-o>
nnoremap n nzzzv
nnoremap N Nzzzv
noremap H ^
noremap L g_
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
"noremap <C-h> <C-w>h
"noremap <C-j> <C-w>j
"noremap <C-k> <C-w>k
"noremap <C-l> <C-w>l
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>
"nnoremap <leader>v <C-w>v<C-w>l
"nnoremap <leader>h <C-w>s<C-w>j
nnoremap <leader>/ :nohl<cr>
"nnoremap <leader>jd :call CocActionAsync('jumpDefinition')<cr>
"nmap <leader>jd  <Plug>(coc-definition)
"nmap <leader>jr  <Plug>(coc-references)
"nmap <leader>jt  <Plug>(coc-type-definition)
"nmap <leader>jj  :call CocAction('doHover')<cr>
"inoremap <silent><expr> <c-space> coc#refresh()
"nnoremap <leader>jd :YcmCompleter GoTo<cr>
"nnoremap <leader>jr :YcmCompleter GoToReferences<cr>
set fixendofline
set cursorline
nmap ]l :lnext<CR>
nmap [l :lprev<CR>
nnoremap ]c ]czz
nnoremap [c [czz
if !&diff
    nmap ]c :cnext<CR>
    nmap [c :cprev<CR>
endif
if &diff
    map <S-Down> ]c
    map <S-Up> [c
endif
"hi clear CursorLine
"autocmd BufWritePre * :%s/\s\+$//e
vnoremap <C-t> :s/\s\+$//e<cr>
autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif


"autocmd FileType cpp,c noremap <buffer> <leader><C-k> :call FormatFile()<cr>
"autocmd FileType cpp,c noremap <buffer> <C-k> :pyf /usr/share/clang/clang-format.py<cr>
"autocmd FileType cpp,c inoremap <buffer> <C-k> <C-o>:pyf /usr/share/clang/clang-format.py<cr>i
"autocmd FileType python noremap <buffer> <C-k> :YAPF<cr>
"autocmd FileType python inoremap <buffer> <C-k> <C-o>:YAPF<cr>i
"augroup Formatting
    "autocmd!
"    autocmd FileType rust nmap <buffer> <leader><C-k> :<C-u>call CocActionAsync('format')<cr>
"    autocmd FileType rust nmap <buffer> <leader><C-r> :<C-u>call CocActionAsync('rename')<cr>
"    autocmd FileType cpp,c nnoremap <buffer> <leader><C-k> :<C-u>call CocActionAsync('format')<cr>
"    autocmd FileType cpp,c vnoremap <buffer> <leader><C-k> :<C-u>call CocActionAsync('format')<cr>
"    autocmd FileType cpp,c,rust setl formatexpr=CocAction('formatSelected')
"augroup END

"call RltvNmbr#RltvNmbrCtrl(1)
"autocmd BufEnter * RltvNmbr
"autocmd BufLeave * RltvNmbr!"

set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufWinEnter,BufEnter,FocusGained,InsertLeave * set nu rnu
  autocmd BufWinLeave,BufLeave,FocusLost,InsertEnter   * set nu rnu!
augroup END


function! FormatFile()
   let l:lines="all"
   pyf /usr/share/clang/clang-format.py
endfunction


if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif


if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

set guicursor=a:block

let NERDTreeDirArrowExpandable="‚ñ∏"
let NERDTreeDirArrowCollapsible="‚ñæ"

" let &t_SR ="\<esc>[2 q"
" unicode symbols
"let g:airline_left_sep = '‚ù±'
"let g:airline_left_sep = '‚ñ∂'
"let g:airline_right_sep = '‚ù∞'
"let g:airline_right_sep = '‚óÄ'
"let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '¬∂'
"let g:airline_symbols.maxlinenr = '„èë'
"let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.spell = 'Íû®'
"let g:airline_symbols.notexists = '…Ü'
"let g:airline_symbols.whitespace = 'Œû'


"let g:LanguageClient_serverCommands = {
"            \ 'rust':['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
"            \ }
"
let g:clipboard = {
    \   'name': 'myClipboard',
    \   'copy': {
    \     '+': 'xclip -selection clipboard -i',
    \     '*': 'xclip -selection clipboard -i',
    \   },
    \   'paste': {
    \     '+': 'xclip -selection clipboard -o',
    \     '*': 'xclip -selection clipboard -o',
    \   },
    \   'cache_enabled': 1,
    \}

lua << EOF
local nvim_lsp = require('lspconfig')

local tools_opts = {
    tools = {
        autoSetHints = true,
        hover_with_actions = true,
        runnables = { use_telescope = true },
        inlay_hints = {
            show_parameter_hints = true,
            parameter_hints_prefix = "<- ",
            other_hints_prefix = "=> ",
        },

        hover_actions = {
            border = {
                {"‚ï≠", "FloatBorder"}, {"‚îÄ", "FloatBorder"},
                {"‚ïÆ", "FloatBorder"}, {"‚îÇ", "FloatBorder"},
                {"‚ïØ", "FloatBorder"}, {"‚îÄ", "FloatBorder"},
                {"‚ï∞", "FloatBorder"}, {"‚îÇ", "FloatBorder"}
            },

            auto_focus = false,
        },
    },

    server = {}
}

require'rust-tools'.setup(tools_opts)

local on_attach = function(client, bufnr)
    -- require'completion'.on_attach(client)

    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

    local opts = { noremap=true, silent=true }

    buf_set_keymap('n', '<leader>jd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    --buf_set_keymap('n', '<leader>jj', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', '<leader>jj', '<Cmd>lua require\'rust-tools.hover_actions\'.hover_actions()<CR>', opts)
    buf_set_keymap('n', '<leader>jt', '<Cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<leader>jr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', '<leader>ji', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<leader>rn', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<leader>f', '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', '<leader>v', '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<leader>ra', '<Cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', '<leader><C-k>', '<Cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local servers = { "rust_analyzer", "clangd" }
for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup {
        on_attach = on_attach,
        flags = {
            debounce_text_changes = 150,
        }
    }
end

require'nvim-treesitter.configs'.setup {
    ensure_installed = {"c","rust","cpp"},
    highlight = { enable = true },
    incremental_selection = { enable = true },
}

require'compe'.setup {
    enabled = true,
    autocomplete = true,
    min_length = 1,
    preselect = 'enable',

    source = {
        path = true,
        buffer = true,
        nvim_lsp = true,
        nvim_lua = true,
    }
}

EOF

inoremap <C-@> <C-Space>
inoremap <Nul> <C-Space>
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
