set nocompatible
filetype off
set ttyfast

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Bundle 'scrooloose/nerdtree'

let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1
nmap <Tab> :NERDTreeFind<CR>
" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L
set guioptions-=T

Bundle 'michaeljsmith/vim-indent-object'
let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

Bundle 'troydm/easybuffer.vim'
nmap <leader>be :EasyBufferToggle<enter>

Bundle 'bling/vim-airline'
let g:airline_powerline_fonts=1


Bundle 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>

Bundle 'scrooloose/syntastic'

Bundle 'altercation/vim-colors-solarized'
Bundle 'rust-lang/rust.vim'

set bg=dark
"set gfn=Input:h9:cRUSSIAN
set gfn=Powerline\ Consolas:h9:cRUSSIAN
"set gfn=Pragmata\ Pro:h12:cRUSSIAN
"set gfn=Pragmata\ Pro\ Mono\ Regular:h16:cRUSSIAN
"set gfn=Input:h17:cRUSSIAN
"set gfn=Monoid\ Tight:h14:cRUSSIAN
set clipboard=unnamed "Enable copy/paste direcly to windows clipboard
set enc=utf-8
set lines=40
set columns=200
let g:screen_size_restore_pos=1
"let g:screen_size_by_vim_instance=1

if has('multi_byte')
    if empty(&termencoding)
        let &termencoding = &encoding
    endif
    let &encoding= 'utf-8'
    let &fileencoding= 'utf-8'
endif

let mapleader = ","
let maplocalleader = "\\"

call vundle#end()

filetype plugin indent on
syntax on
set fileformats=dos,unix
set scrolloff=0
set switchbuf=useopen
inoremap jk <Esc>
set autoread
set backspace=indent,eol,start
"set binary
set cinoptions=:0,l1,g0,(0,W1s,m1
set completeopt=menuone,preview
set hidden
set history=1000
set incsearch
set laststatus=2
set listchars=tab:>-,trail:@
set list
"set nolazyredraw
set modelines=0
set noeol
set nu
set numberwidth=5
set ruler
set showcmd
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set formatoptions=qrn1
set ignorecase
set smartcase
set showmatch
set gdefault
set hlsearch
nnoremap * *<c-o>
nnoremap n nzzzv
nnoremap N Nzzzv
noremap H ^
noremap L g_
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j
nnoremap <leader>/ :nohl<cr>
set cm=blowfish2
set fixendofline
set cursorline
if has("gui_running")
    colorscheme solarized
    set renderoptions=type:directx
    set bg=light
endif
" set cc=100
nmap ]l :lnext<CR>
nmap [l :lprev<CR>
hi clear CursorLine
hi CursorLine ctermbg=DarkBlue ctermfg=White

" Trailing whitespace {{{

" Remove trailing whitespaces when saving
" Wanna know more? http://vim.wikia.com/wiki/Remove_unwanted_spaces
" If you want to remove trailing spaces when you want, so not automatically,
" see
" http://vim.wikia.com/wiki/Remove_unwanted_spaces#Display_or_remove_unwanted_whitespace_with_a_script.
autocmd BufWritePre * :%s/\s\+$//e

" }}}

let g:rustc_path = "C:/Program Files/Rust stable 1.3/bin/rustc.exe"

autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif
